plot(fitted(tubes.aov), tubes.res)
plot(fitted(plots.aov), tubes.res)
plot(fitted(plots.aov), plots.res)
# data table
Yield <-  c(36.0, 33.8, 32.6, 26.9,
31.4, 29.1, 25.0, 30.3,
28.4, 34.3, 25.3, 28.7,
31.1, 33.3, 34.2, 26.3)
Nut <- c("C", "D", "A", "B",
"B", "C", "D", "A",
"A", "B", "C", "D",
"D", "A", "B", "C")
Soil <- rep(x = c("1", "2", "3", "4"), times = 4)
Water <- rep(x = c("1", "2", "3", "4"), each = 4)
plots <- data.frame(cbind(Yield, Nut, Soil, Water))
plots <- unfactor(plots)
# ANOVA
plots.aov <- aov(formula = Yield ~ factor(Nut) + factor(Soil) + factor(Water), data = plots)
summary(plots.aov)
# linear model
plots.res <- residuals(plots.aov)
# normal assumption
qqPlot(plots.res)
# residuals vs. fitted
plot(fitted(plots.aov), plots.res)
# residuals vs. variables
plot(plots$Nut, plots.res)
plot(plots$Nut, plots.res, xlim = c(-10, 10))
plot(plots$Nut, plots.res)
str(plots)
plot(plots$Soil, plots.res)
plot(plots$Water, plots.res)
plot(factor(plots$Nut), plots.res)
plot(plots$Soil, plots.res)
plot(plots$Water, plots.res)
Dense <- c(584, 556, 585, 563, 538, 530, 515, 605,
1076, 1102, 1101, 1019, 1028, 993, 1007, 1011,
1016, 996, 1030, 1001, 937, 905, 1033, 949,
562, 534, 590, 544, 500, 510, 540, 541)
Pos <- rep(x = c("1", "2"), each = 4)
Dense <- c(584, 556, 585, 563, 538, 530, 515, 605,
1076, 1102, 1101, 1019, 1028, 993, 1007, 1011,
1016, 996, 1030, 1001, 937, 905, 1033, 949,
562, 534, 590, 544, 500, 510, 540, 541)
Pos <- rep(x = c("1", "2"), each = 4, times = 4)
Temp <- rep(x = c("800", "825", "850", "875"), each = 4)
carbon <- data.frame(cbind(Dense, Pos, Temp))
View(carbon)
Dense <- c(584, 556, 585, 563, 538, 530, 515, 605,
1076, 1102, 1101, 1019, 1028, 993, 1007, 1011,
1016, 996, 1030, 1001, 937, 905, 1033, 949,
562, 534, 590, 544, 500, 510, 540, 541)
Pos <- rep(x = c("1", "2"), each = 4, times = 4)
Temp <- rep(x = c("800", "825", "850", "875"), each = 8)
carbon <- data.frame(cbind(Dense, Pos, Temp))
str(carbon)
carbon <- unfactor(carbon)
str(carbon)
carbon.aov <- aov(formula = Dense ~ factor(Pos) + factor(Temp))
summary(carbon.aov)
plots.res <- residuals(carbon.aov)
qqPlot(carbon.res)
carbon.res <- residuals(carbon.aov)
qqPlot(carbon.res)
plot(fitted(carbon.aov), carbon.res)
plot(factor(carbon$Pos), carbon.res)
plot(factor(carbon$Temp), carbon.res)
plot(carbon$Pos, carbon.res)
plot(carbon$Temp, carbon.res)
carbon.aov <- aov(formula = Dense ~ factor(Pos) + factor(Temp), data = carbon)
summary(carbon.aov)
# data table
Dense <- c(584, 556, 585, 563, 538, 530, 515, 605,
1076, 1102, 1101, 1019, 1028, 993, 1007, 1011,
1016, 996, 1030, 1001, 937, 905, 1033, 949,
562, 534, 590, 544, 500, 510, 540, 541)
Pos <- rep(x = c("1", "2"), each = 4, times = 4)
Temp <- rep(x = c("800", "825", "850", "875"), each = 8)
carbon <- data.frame(cbind(Dense, Pos, Temp))
carbon <- unfactor(carbon)
# ANOVA
carbon.aov <- aov(formula = Dense ~ factor(Pos) + factor(Temp), data = carbon)
summary(carbon.aov)
# defining residuals
carbon.res <- residuals(carbon.aov)
# normal assumption
qqPlot(carbon.res)
# residuals vs. fitted
plot(fitted(carbon.aov), carbon.res)
# residuals vs. variables
plot(carbon$Pos, carbon.res)
plot(carbon$Temp, carbon.res)
View(carbon)
Rep1 <- c(30.82, 28.89, 8.22, 38.08, 23.95, 29.06, 17.12, 34.29)
Rep2 <- c(26.79, 28.71, 39.58, 38.21, 31.06, 24.23, 23.74, 35.88)
Rep3 <- c(23.98, 27.77, 16.96, 23.92, 27.83, 30.38, 30.70, 39.65)
Rep4 <- c(30.92, 33.91, 33.09, 31.13, 33.20, 30.36, 14.20, 34.21)
Rep <- c(Rep1, Rep2, Rep3, Rep4)
tool <- data.frame(cbind(A, B, C, Rep))
A <- rep(x = c(-1, 1), times = 16)
B <- rep(x = c(-1, 1), each = 2, times = 8)
C <- rep(x = c(-1, 1), each = 4, times = 4)
tool <- data.frame(cbind(A, B, C, Rep))
tool <- unfactor(tool)
str(tool)
carbon.lm <- lm(formula = Rep ~ factor(A) * factor(B) * factor(C))
summary(carbon.lm)
ybar <- as.vector(which(tubes.L, tapply(Conductivity, Coating, function(x) mean(x))))
# data table
Coating1 <- c(143, 146, 146, 139, 145, 148)
Coating2 <- c(140, 149, 143, 134, 144, 140)
Coating3 <- c(134, 139, 139, 136, 131, 135)
Coating4 <- c(131, 139, 136, 130, 123, 127)
tubes <- data.frame(cbind(Coating1, Coating2, Coating3, Coating4))
tubes.L <- reshape(data = tubes, varying = c("Coating1", "Coating2", "Coating3", "Coating4"), v.names = "Conductivity", timevar = "Coating", direction = "long")
ybar <- as.vector(which(tubes.L, tapply(Conductivity, Coating, function(x) mean(x))))
ybar <- as.vector(with(tubes.L, tapply(Conductivity, Coating, function(x) mean(x))))
ybar
# ANOVA
tubes.aov <- aov(formula = Conductivity ~ factor(Coating), data = tubes.L)
summary(tubes.aov)
MSE <- summary(tubes.aov)[[1]][3,3]
t0 = (ybar[1] - ybar[2]) / sqrt(2*MSE)
2 * pt(q = abs(t0), df = 9, lower.tail = F)
pt(q = abs(t0), df = 9, lower.tail = F)
2
t0 = (ybar[1] - ybar[2]) / sqrt(2*MSE)
2 * pt(q = abs(t0), df = 9, lower.tail = F)
# MSE
MSE <- summary(tubes.aov)[[1]][3,3]
# y_bar vector
ybar <- as.vector(with(tubes.L, tapply(Conductivity, Coating, function(x) mean(x))))
# 1-2
t0 = (ybar[1] - ybar[2]) / sqrt(2*MSE)
2 * pt(q = abs(t0), df = 9, lower.tail = F)
# MSE
MSE <- summary(tubes.aov)[[1]][3,3]
# y_bar vector
ybar <- as.vector(with(tubes.L, tapply(Conductivity, Coating, function(x) mean(x))))
# 1-2
t0 = (ybar[1] - ybar[2]) / sqrt(2*MSE)
2 * pt(q = abs(t0), df = 9, lower.tail = F)
t0 = (ybar[1] - ybar[2]) / sqrt(2*MSE / 4)
2 * pt(q = abs(t0), df = 9, lower.tail = F)
MSE
summary(tubes.aov)[[1]]
MSE <- summary(tubes.aov)[[1]][2,3]
MSE
# MSE
MSE <- summary(tubes.aov)[[1]][2,3]
# y_bar vector
ybar <- as.vector(with(tubes.L, tapply(Conductivity, Coating, function(x) mean(x))))
# 1-2
t0 = (ybar[1] - ybar[2]) / sqrt(2*MSE / 4)
2 * pt(q = abs(t0), df = 9, lower.tail = F)
# MSE
MSE <- summary(tubes.aov)[[1]][2,3]
# y_bar vector
ybar <- as.vector(with(tubes.L, tapply(Conductivity, Coating, function(x) mean(x))))
# 1-2
t0 = (ybar[1] - ybar[2]) / sqrt(2*MSE / 4)
2 * pt(q = abs(t0), df = 9, lower.tail = F)
# 1-3
t0 = (ybar[1] - ybar[3]) / sqrt(2*MSE / 4)
2 * pt(q = abs(t0), df = 9, lower.tail = F)
# 1-4
t0 = (ybar[1] - ybar[4]) / sqrt(2*MSE / 4)
2 * pt(q = abs(t0), df = 9, lower.tail = F)
# 2-3
t0 = (ybar[2] - ybar[3]) / sqrt(2*MSE / 4)
2 * pt(q = abs(t0), df = 9, lower.tail = F)
# 2-4
t0 = (ybar[2] - ybar[4]) / sqrt(2*MSE / 4)
2 * pt(q = abs(t0), df = 9, lower.tail = F)
# 3-4
t0 = (ybar[3] - ybar[4]) / sqrt(2*MSE / 4)
2 * pt(q = abs(t0), df = 9, lower.tail = F)
# linear model
carbon.lm <- lm(formula = Rep ~ factor(A) * factor(B) * factor(C))
# data table
A <- rep(x = c(-1, 1), times = 16)
B <- rep(x = c(-1, 1), each = 2, times = 8)
C <- rep(x = c(-1, 1), each = 4, times = 4)
Rep1 <- c(30.82, 28.89, 8.22, 38.08, 23.95, 29.06, 17.12, 34.29)
Rep2 <- c(26.79, 28.71, 39.58, 38.21, 31.06, 24.23, 23.74, 35.88)
Rep3 <- c(23.98, 27.77, 16.96, 23.92, 27.83, 30.38, 30.70, 39.65)
Rep4 <- c(30.92, 33.91, 33.09, 31.13, 33.20, 30.36, 14.20, 34.21)
Rep <- c(Rep1, Rep2, Rep3, Rep4)
tool <- data.frame(cbind(A, B, C, Rep))
tool <- unfactor(tool)
# packages
library(varhandle) #unfactorizes data
library(car) # qqplot
# data table
A <- rep(x = c(-1, 1), times = 16)
B <- rep(x = c(-1, 1), each = 2, times = 8)
C <- rep(x = c(-1, 1), each = 4, times = 4)
Rep1 <- c(30.82, 28.89, 8.22, 38.08, 23.95, 29.06, 17.12, 34.29)
Rep2 <- c(26.79, 28.71, 39.58, 38.21, 31.06, 24.23, 23.74, 35.88)
Rep3 <- c(23.98, 27.77, 16.96, 23.92, 27.83, 30.38, 30.70, 39.65)
Rep4 <- c(30.92, 33.91, 33.09, 31.13, 33.20, 30.36, 14.20, 34.21)
Rep <- c(Rep1, Rep2, Rep3, Rep4)
tool <- data.frame(cbind(A, B, C, Rep))
tool <- unfactor(tool)
# linear model
carbon.lm <- lm(formula = Rep ~ factor(A) * factor(B) * factor(C))
summary(carbon.lm)
# linear model
carbon.lm <- lm(formula = Rep ~ factor(A) * factor(B) * factor(C))
summary(carbon.lm)
coef <- carbon.lm$coefficients[-1]
variables <- names(coef)
variables
plot <- qqnorm(coef)
variables[identify(plot)]
# linear model
carbon.lm <- lm(formula = Rep ~ factor(A) * factor(B) * factor(C))
summary(carbon.lm)
# probability plot
coef <- carbon.lm$coefficients[-1]
variables <- names(coef)
plot <- qqnorm(coef)
variables[identify(plot)]
variables[identify(plot)]
coef <- carbon.lm$coefficients[-1]
variables <- names(coef)
plot <- qqnorm(coef)
variables[identify(plot)]
# linear model
carbon.lm <- lm(formula = Rep ~ factor(A) * factor(B) * factor(C))
summary(carbon.lm)
# probability plot
coef <- carbon.lm$coefficients[-1]
variables <- names(coef)
plot <- qqnorm(coef)
variables[identify(plot)]
carbon.aov <- aov(formula = Rep ~ factor(A) * factor(B) * factor(C))
summary(carbon.aov)
# linear model
carbon.lm <- lm(formula = Rep ~ factor(A) * factor(B) * factor(C))
summary(carbon.lm)
# probability plot
coef <- carbon.lm$coefficients[-1]
variables <- names(coef)
plot <- qqnorm(coef)
variables[identify(plot)]
plot <- qqnorm(coef)
> variables[identify(plot)]
plot <- qqnorm(coef)
variables[identify(plot)]
# interaction plot
with(tool, interaction.plot(factor(A), factor(B), Rep))
# linear model
tool.lm <- lm(formula = Rep ~ factor(A) * factor(B) * factor(C))
summary(tool.lm)
# probability plot
coef <- tool.lm$coefficients[-1]
variables <- names(coef)
plot <- qqnorm(coef)
variables[identify(plot)]
tool.aov <- aov(formula = Rep ~ factor(A) * factor(B) * factor(C))
summary(tool.aov)
# defining residuals
tool.res <- residuals(tool.aov)
# normal assumption
qqPlot(tool.res)
# residuals vs. fitted
plot(fitted(tool.aov), tool.res)
# residuals vs. variables
plot(tool$A, tool.res)
plot(tool$B, tool.res)
plot(tool$C, tool.res)
A <- rep(x = c("-", "+"), times = 4)
B <- rep(x = c("-", "+"), each = 2, times = 2)
C <- rep(x = c("-", "+"), each = 4)
A <- rep(x = c(-1, 1), times = 4)
B <- rep(x = c(-1, 1), each = 2, times = 2)
C <- rep(x = c(-1, 1), each = 4)
D <- A*B*C
design <- data.frame(cbind(A, B, C, D, E, Response))
A <- rep(x = c(-1, 1), times = 4)
B <- rep(x = c(-1, 1), each = 2, times = 2)
C <- rep(x = c(-1, 1), each = 4)
D <- A*B*C
E <- B*C
Response <- c(16.77, 31.42, 37.40, 35.34, 34.66, 32.57, 16.30, 33.56)
design <- data.frame(cbind(A, B, C, D, E, Response))
design.lm <- lm(formula = Response ~ A * B * C * D * E, data = design)
alias(design.lm)
alias(lm(formula = Response ~ A * B * C * D * E, data = design))
summary(design.lm)
design.aov <- aov(formula = Response ~ A* B * C * D * E, data = design)
qqnorm(aov(formula = Response ~ A* B * C * D * E, data = design))
qqnorm(aov(formula = Response ~ A* B * C * D * E, data = design), label = TRUE)
str(design)
design.lm <- lm(formula = Response ~ factor(A) * factor(B) * factor(C) * factor(D) * factor(E), data = design)
summary(design.lm)
qqnorm(aov(formula = Response ~ factor(A) * factor(B) * factor(C) * factor(D) * factor(E), data = design), label = TRUE)
qqnorm(aov(formula = Response ~ factor(A) * factor(B) * factor(C) * factor(D) * factor(E), data = design), label = TRUE)
qqnorm(aov(Response ~ factor(A) * factor(B) * factor(C) * factor(D) * factor(E), design), label = TRUE)
qqnorm(aov(numeric(Response) ~ factor(A) * factor(B) * factor(C) * factor(D) * factor(E), design), label = TRUE)
qqnorm(aov(Response ~ A * B * C * D * E, design), label = TRUE)
# packages
library(varhandle) #unfactorizes data
library(car) # qqplot
# linear model
design.lm <- lm(formula = Response ~ factor(A) * factor(B) * factor(C) * factor(D) * factor(E), data = design)
summary(design.lm)
# half normal probability plot
qqnorm(aov(Response ~ A * B * C * D * E, design), label = TRUE)
str(design)
fraction.design <- with(design, design[A * B * C == 1,])
qqnorm(aov(Response ~ A * B * C * D * E, fraction.design), label = TRUE)
library(forecast) # allows forecasting
library(tseries) # adf.tests and ARIMA models
library(stats) # AIC
library(vars) # VAR and Varselect
library(ggplot2) # better plots
library(gridExtra) # more ggplot options
library(ggfortify) # more gpglot options
library(varhandle) # unfactorizes data
WI09 <- c(16, 23, 26, 36, 115, 464, 647, 286, 148, 82, 60, 45)
WI10 <- c(39, 30, 38, 72, 233, 821, 699, 239, 131, 133, 44, 32)
WI11 <- c(39, 21, 38, 67, 152, 589, 832, 346, 156, 88, 63, 34)
WI12 <- c(41, 33, 57, 93, 200, 453, 341, 108, 83, 38, 25, 15)
WI13 <- c(20, 11, 14, 13, 109, 398, 594, 284, 167, 71, 28, 17)
WI14 <- c(16, 9, 15, 27, 85, 254, 320, 115, 78, 45, 11, 9)
WI15 <- c(13, 8, 11, 33, 144, 376, 373, 142, 77, 74, 28, 22)
WI16 <- c(9, 14, 28, 57, 127, 433, 438, 146, 80, 91, 47, 21)
WI <- c(WI09, WI10, WI11, WI12, WI13, WI14, WI15, WI16)
Year <- rep(x = c(2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016),
each = 12)
Month <- rep(x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12),
times = 8)
origin <- read.table("trend_data.txt", sep = "\t", skip = 2, header = TRUE, stringsAsFactors = FALSE)
trend <- unfactor(origin[61:156,])
master <- data.frame(cbind(trend, WI))
names(master) = c("Date", "Trend", "Reports")
master$Reports = log(master$Reports)
master$Trend = log(master$Trend)
lyme.ts <- ts(master$Reports,
start = c(2009, 1),
frequency = 12)
master.ts <- ts(master[-1],
start = c(2009, 1),
frequency = 12)
Searches.ts <- ts(master$Trend,
start = c(2009, 1),
frequency = 12)
lyme.a <- window(x = lyme.ts,
end = c(2014, 12))
master.a <- window(x = master.ts,
end = c(2014, 12))
Lyme.plot <- autoplot(lyme.ts, ts.colour="blue", ts.linetype = 'dashed') +
ggtitle("Confirmed Cases of Lyme's Disease in Wisconsin") +
xlab("Year") +
ylab("Reported Cases")
Searches.plot <- autoplot(Searches.ts,ts.colour="red", ts.linetype = 'dashed') +
ggtitle("Google Searches of Lyme's searches") +
xlab("Year") +
ylab("Searhces")
lyme.ts <- ts(master$Reports,
start = c(2009, 1),
frequency = 12)
trend <- unfactor(origin[61:156,])
setwd("C:/Users/jling/Desktop/School_Stuff/Github/ECON825")
library(forecast) # allows forecasting
library(tseries) # adf.tests and ARIMA models
library(stats) # AIC
library(vars) # VAR and Varselect
library(ggplot2) # better plots
library(gridExtra) # more ggplot options
library(ggfortify) # more gpglot options
library(varhandle) # unfactorizes data
WI09 <- c(16, 23, 26, 36, 115, 464, 647, 286, 148, 82, 60, 45)
WI10 <- c(39, 30, 38, 72, 233, 821, 699, 239, 131, 133, 44, 32)
WI11 <- c(39, 21, 38, 67, 152, 589, 832, 346, 156, 88, 63, 34)
WI12 <- c(41, 33, 57, 93, 200, 453, 341, 108, 83, 38, 25, 15)
WI13 <- c(20, 11, 14, 13, 109, 398, 594, 284, 167, 71, 28, 17)
WI14 <- c(16, 9, 15, 27, 85, 254, 320, 115, 78, 45, 11, 9)
WI15 <- c(13, 8, 11, 33, 144, 376, 373, 142, 77, 74, 28, 22)
WI16 <- c(9, 14, 28, 57, 127, 433, 438, 146, 80, 91, 47, 21)
WI <- c(WI09, WI10, WI11, WI12, WI13, WI14, WI15, WI16)
Year <- rep(x = c(2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016),
each = 12)
Month <- rep(x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12),
times = 8)
origin <- read.table("trend_data.txt", sep = "\t", skip = 2, header = TRUE, stringsAsFactors = FALSE)
trend <- unfactor(origin[61:156,])
master <- data.frame(cbind(trend, WI))
names(master) = c("Date", "Trend", "Reports")
master$Reports = log(master$Reports)
master$Trend = log(master$Trend)
lyme.ts <- ts(master$Reports,
start = c(2009, 1),
frequency = 12)
master.ts <- ts(master[-1],
start = c(2009, 1),
frequency = 12)
Searches.ts <- ts(master$Trend,
start = c(2009, 1),
frequency = 12)
lyme.a <- window(x = lyme.ts,
end = c(2014, 12))
master.a <- window(x = master.ts,
end = c(2014, 12))
Lyme.plot <- autoplot(lyme.ts, ts.colour="blue", ts.linetype = 'dashed') +
ggtitle("Confirmed Cases of Lyme's Disease in Wisconsin") +
xlab("Year") +
ylab("Reported Cases")
Searches.plot <- autoplot(Searches.ts,ts.colour="red", ts.linetype = 'dashed') +
ggtitle("Google Searches of Lyme's searches") +
xlab("Year") +
ylab("Searhces")
grid.arrange(Lyme.plot, Searches.plot, nrow=2)
Lyme.season.plot <- ggseasonplot(lyme.ts, year.labels = TRUE, year.labels.left = TRUE) +
ylab("Confirmed Cases") + ggtitle("Seasonailty for confirmed Lyme's disease cases in Wisconcin")
Search.season.plot <-ggseasonplot(Searches.ts, year.labels = TRUE, year.labels.left = TRUE) +
ylab("Google Searches") + ggtitle("Seasonailty for google searches for 'Lyme's Disease'")
grid.arrange(Lyme.season.plot, Search.season.plot, nrow = 2)
Lyme.Polar <- ggseasonplot(lyme.ts, polar=TRUE) + ylab("Confirmed Cases") + ggtitle("Confirmed Cases in Wisconsin")
Searches.Polar <- ggseasonplot(Searches.ts, polar=TRUE) + ylab("Searhces") + ggtitle("Google Searches")
grid.arrange(Lyme.Polar, Searches.Polar, nrow = 2)
Lyme.subplot <- ggsubseriesplot(lyme.ts) + ylab("Confirmed Cases") + ggtitle("Confirmed Cases in Wisconsin")
Searches.subplot <- ggsubseriesplot(Searches.ts) + ylab("Google searches") + ggtitle("Google Searches")
grid.arrange(Lyme.subplot, Searches.subplot, nrow = 2)
ggAcf(lyme.ts, lag = 100)
ggPacf(lyme.ts, lag = 100)
adf.test(x = lyme.ts)
ndiffs(lyme.ts)
adf.test(x = Searches.ts)
ndiffs(Searches.ts)
fit.mean <- autoplot(meanf(y = lyme.a, h = 24), seires = "Mean", PI = FALSE) +
ylab("Confirmed Cases") + ggtitle("Mean Fit Model")
fit.naive <- autoplot(naive(y = lyme.a, h = 24), series = "Naive", PI = FALSE) +
ylab("Confirmed Cases") + ggtitle("Naive Fit Model")
fit.snaive <- autoplot(snaive(y = lyme.a, h = 24), series = "S-Naive", PI = FALSE) +
ylab("Confirmed Cases") + ggtitle("Seasonal-Naive Fit Model")
fit.drift <- autoplot(rwf(y = lyme.a, h = 24, drift = TRUE), series = "Drift", PI = FALSE) +
ylab("Confirmed Cases") + ggtitle("Random Walk Fit Model")
grid.arrange(fit.mean, fit.naive, fit.snaive, fit.drift, ncol = 2)
checkresiduals(meanf(y = lyme.a, h = 24))
checkresiduals(naive(y = lyme.a, h = 24))
checkresiduals(snaive(y = lyme.a, h = 24))
checkresiduals(rwf(y = lyme.a, h = 24, drift = TRUE))
fit.lm <- tslm(formula = lyme.a  ~ season)
summary(fit.lm)
lyme.prd <- fit.lm$fit
lyme.f <- forecast(fit.lm, h=24, level = 95)
plot(lyme.f,col = "blue", lwd = 2,
ylab = "Confirmed Cases", xlab = "Year",
main = "Seasonal Linear Model")
lines(lyme.ts, lwd = 2)
lines(lyme.prd, col = "red", lwd = 2)
legend("bottomleft", c("Observed", "Predicted", "Fitted"), col = c("black", "blue", "red"), lwd = 2)
checkresiduals(fit.lm)
fit.ar1 <- arima(lyme.a, order = c(1,0,0))
summary(fit.ar1)
ar1.prd <- fitted(fit.ar1)
ar1.f <- forecast(fit.ar1, h = 24, lwd = 2)
plot(ar1.f, col = "blue", lwd = 2,
ylab = "Confirmed Cases", xlab = "Year",
main = "AR(1) Model")
lines(lyme.ts, lwd = 2)
lines(ar1.prd, col = "red", lwd = 2)
legend("bottomleft", c("Observed", "Predicted", "Fitted"), col = c("black", "blue", "red"), lwd = 2)
# plotting fit
lyme.prd <- fit.lm$fit
lyme.f <- forecast(fit.lm, h=24, level = 95)
plot(lyme.f,col = "blue", lwd = 2,
ylab = "Confirmed Cases", xlab = "Year",
main = "Seasonal Linear Model")
lines(lyme.ts, lwd = 2)
lines(lyme.prd, col = "red", lwd = 2)
legend("bottomleft", c("Observed", "Predicted", "Fitted"), col = c("black", "blue", "red"), lwd = 2)
plot(ar1.f, col = "blue", lwd = 2,
ylab = "Confirmed Cases", xlab = "Year",
main = "AR(1) Model")
lines(lyme.ts, lwd = 2)
lines(ar1.prd, col = "red", lwd = 2)
legend("bottomleft", c("Observed", "Predicted", "Fitted"), col = c("black", "blue", "red"), lwd = 2)
checkresiduals(fit.ar1)
fit.ar2 <- arima(lyme.a, order = c(2,0,0))
summary(fit.ar2)
ar2.prd <- fitted(fit.ar2)
ar2.f <- forecast(fit.ar2, h = 24, lwd = 2)
plot(ar2.f, col = "blue", lwd = 2,
ylab = "Confirmed Cases", xlab = "Year",
main = "AR(2) Model")
lines(lyme.ts, lwd = 2)
lines(ar2.prd, col = "red", lwd = 2)
legend("bottomleft", c("Observed", "Predicted", "Fitted"), col = c("black", "blue", "red"), lwd = 2)
fit.aa <- auto.arima(y = lyme.a, stationary = TRUE)
summary(fit.aa)
aa.prd <- fit.aa$fit
aa.f <- forecast(fit.aa, h = 24, level = 95)
plot(aa.f, col = "blue", lwd = 2,
ylab = "Confirmed Cases", xlab = "Year",
main = "Auto ARIMA Model")
lines(lyme.ts, lwd = 2)
lines(aa.prd, col = "red", lwd = 2)
legend("bottomleft", c("Observed", "Predicted", "Fitted"), col = c("black", "blue", "red"), lwd = 2)
fit.aa2 <- auto.arima(y = lyme.ts, stationary = TRUE)
summary(fit.aa)
aa.prd2 <- fit.aa2$fit
aa.f2 <- forecast(fit.aa2, h = 24, level = 95)
plot(aa.f2, col = "blue", lwd = 2,
ylab = "Confirmed Cases", xlab = "Year",
main = "Auto ARIMA Forecast")
lines(lyme.ts, lwd = 2)
lines(aa.prd2, col = "red", lwd = 2)
legend("bottomleft", c("Observed", "Predicted", "Fitted"), col = c("black", "blue", "red"), lwd = 2)
